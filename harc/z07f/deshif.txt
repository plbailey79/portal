// deshif.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

#include <math.h>

#pragma warning(disable: 4305)  // Disable warning for double to float truncation
#pragma warning(disable: 4996)  // Disable (nonstandard) "deprecated" warning
#pragma warning(disable: 4267)  // Disable (nonstandard) int len=strlen(str) warning

char chrupr(char chr)
{ if (chr >= 'A' && chr <= 'Z') return chr;
  if (chr >= 'a' && chr <= 'z') return chr-32;
  return 0; }

#define square(x) ((x)*(x))

// Standard English Frequency Chart

float eng[26] =
//  a     b     c     d     e     f     g
{ .082, .015, .028, .043, .127, .022, .020,
//  h     i     j     k     l     m     n
  .061, .070, .002, .008, .040, .024, .067, 
//  o     p     q     r     s     t     u
  .075, .019, .001, .060, .063, .091, .028,
//  v     w     x     y     z
  .010, .023, .001, .020, .001 };

float dat[26];
int raw[26];
int tot=0;
 
void freq(FILE* ori)
{ int chr;
  int i;
  for (i=0; i<26; i++) raw[i]=0;
  while ((chr=fgetc(ori))!=EOF)
  { if (chr=chrupr(chr))
    { raw[chr-'A']++; } }
  for (i=0; i<26; i++) tot+=raw[i];
  for (i=0; i<26; i++) dat[i]=float(raw[i])/tot; }

float dist(int key)
{ int i;
  float v=0;
  for (i=0; i<26; i++)
  { v += square(dat[(i+key)%26]-eng[i]); }
  v = sqrt(v);
  return v; }

void print(void)
{ int i=0;
  printf("Total: %d   Distance: %f\n",tot,dist(0));
  for (i=0; i<26; i++)
  { printf("%c: %0.3f   ",i+'A',dat[i]);
    if ((i+1)%7==0) printf("\n"); }
  printf("\n"); }

void deshif(FILE* ori) // exhaustive key search
{ int key=0;
  int ret=0;
  float v=0,w=1;
  freq(ori);
  print();
  for (key=0; key<26; key++)
  { v = dist(key);
    if (v<w) { ret=key; w=v; }
    printf("key: %2d  dist: %f   ",key,v);
    if ((key+1)%3==0) printf("\n"); }
  printf("\n");
  printf("Encrypt Key = %d   Decrypt Key = %d\n",ret,26-ret); }

int main(int argc, char* argv[])
{ FILE* ori;
  if (argc!=2)
  { printf("DESHIF <source file>\n"); 
    return 0; }
  ori=fopen(argv[1],"rt");
  if (!ori)
  { printf("Cannot open %s\n",argv[1]);
    return 1; }
  deshif(ori);
  fclose(ori);
	return 0; }
