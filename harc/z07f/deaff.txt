// deaff.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

#include <math.h>

#pragma warning(disable: 4305)  // Disable warning for double to float truncation
#pragma warning(disable: 4996)  // Disable (nonstandard) "deprecated" warning

#define STRLEN 64

#define square(x) ((x)*(x))

float eng[26] =
{ .082, .015, .028, .043, .127, .022, .020, 
  .061, .070, .002, .008, .040, .024, .067, 
  .075, .019, .001, .060, .063, .091, .028,
  .010, .023, .001, .020, .001 };

float dat[26];
int raw[26];
int tot=0;

int mulinv[26] =
{ 0, 1, 0, 9, 0, 21, 0, 15, 0, 3, 0, 19, 0, 0,
  0, 7, 0, 23, 0, 11, 0, 5, 0, 17, 0, 25 };

char ctoc(char chr)
{ if (chr >= 'A' && chr <= 'Z') return chr;
  if (chr >= 'a' && chr <= 'z') return chr-32;
  return 0; }

int inverse(int key)
{ int ka=(key/100)%26,kb=(key%100)%26;
  ka=mulinv[ka];
  kb=26-((kb*ka)%26);
  return ka*100+kb; }
 
void freq(FILE* ori)
{ char chr;
  int i;
  for (i=0; i<26; i++) raw[i]=0;
  while ((chr=fgetc(ori))!=EOF)
  { if (chr=ctoc(chr))
    { raw[chr-'A']++; } }
  for (i=0; i<26; i++) tot+=raw[i];
  for (i=0; i<26; i++) dat[i]=float(raw[i])/tot; }

float dist(int ka,int kb)
{ int i;
  float v=0;
  for (i=0; i<26; i++)
  { v += square(dat[(i*ka+kb)%26]-eng[i]); }
  v = sqrt(v);
  return v; }

void print(void)
{ int i=0;
  printf("Total: %d   Distance: %f\n",tot,dist(1,0));
  for (i=0; i<26; i++)
  { printf("%c: %0.3f   ",i+'A',dat[i]);
    if ((i+1)%7==0) printf("\n"); }
  printf("\n"); }

void deaffine(FILE* ori) // exhaustive key search
{ int key=0,ka=0,kb=0;
  int ret=0;
  float v=0,w=1;
  freq(ori);
  print();
  for (ka=1; ka<26; ka++)
  { if (ka%2==0 || ka%13==0) continue;
    for (kb=0; kb<26; kb++)
    { v = dist(ka,kb);
      key=ka*100+kb;
      if (v<w) { ret=key; w=v; }
      printf("a=%2d  b=%2d  d=%f  ",ka,kb,v);
      if ((kb+1)%3==0) printf("\n"); }
    printf("\n"); }
  printf("Encrypt Key = %d   Decrypt Key = %d\n",ret,inverse(ret)); }

int main(int argc, char* argv[])
{ FILE* ori;
  if (argc!=2)
  { printf("DEAFF <source file>\n"); 
    return 0; }
  ori=fopen(argv[1],"rt");
  if (!ori)
  { printf("Cannot open %s\n",argv[1]);
    return 1; }
  deaffine(ori);
  fclose(ori);
	return 0; }
